#version 460
#extension GL_EXT_ray_tracing : enable

#define MAX_DEPTH 10
#define MAX_RAYS_PER_PIXEL 10

// ------ Bindings ------ 
layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform SceneData {
	mat4 invertedView;
	mat4 invertedProj;
	vec4 lightDirection;
	vec4 lightColor;
	uint maxDepth;
	uint rays_per_pixel;
	float diffusion;
	uint render_mode;
} scene;

struct RayData{
	vec3 origin;
	vec3 direction;
	float absorbMul;
};

// ------ HitInfo ------ 
layout(location = 0) rayPayloadEXT HitInfo {
	vec4 hitValue;
	vec3 hitOrigin;
	vec3 hitNormal;
} hitInfo;

RayData get_ray_data(){
	RayData ray_data; 

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	const vec2 d = (inUV * 2.0 - 1.0);

	ray_data.origin = vec3(scene.invertedView * vec4(0, 0, 0, 1));
	vec3 target = normalize(vec3(scene.invertedProj * vec4(d.x, d.y, 1, 1)));
	ray_data.direction = vec3(scene.invertedView * vec4(target, 0));
	ray_data.absorbMul = 1.0;

	return ray_data;
}

vec3 render_debug_reflections(){
	RayData ray_data = get_ray_data();

	uint missIndex = 0;
	float tmin = 0.001;
	float tmax = 100.0;

	traceRayEXT(
		topLevelAS, 
		gl_RayFlagsOpaqueEXT, 
		0xff, 
		0, 0, 
		missIndex, 
		ray_data.origin, 
		tmin, 
		ray_data.direction, 
		tmax, 
		0
	);

	const vec3 color = vec3(1.0, 0.0, 0.0) * vec3(hitInfo.hitValue[3] < 1.0) + 
		vec3(0.0, 1.0, 0.0) * vec3(hitInfo.hitValue[3] >= 1.0 && (hitInfo.hitValue[0] + hitInfo.hitValue[1] + hitInfo.hitValue[2]) > 0);

	return color;
}
vec3 render_debug_color(){
	RayData ray_data = get_ray_data();
	
	uint missIndex = 0;
	float tmin = 0.001;
	float tmax = 100.0;

	traceRayEXT(
		topLevelAS, 
		gl_RayFlagsOpaqueEXT, 
		0xff, 
		0, 0, 
		missIndex, 
		ray_data.origin, 
		tmin, 
		ray_data.direction, 
		tmax, 
		0
	);

	return vec3(hitInfo.hitValue[0], hitInfo.hitValue[1], hitInfo.hitValue[2]);
}


float randFloat(vec2 uv){
    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);
}
vec3 randVec3(vec2 uv){
    return vec3(randFloat(uv), randFloat(uv + vec2(0, 1)), randFloat(uv + vec2(1, 0)));
}
vec3 randVec3(vec2 uv, vec3 min, vec3 max){
	vec3 v = randVec3(uv);
    return min + v * (max - min);
}

vec3 render_diffusion(){

	uint missIndex = 0;
	float tmin = 0.001;
	float tmax = 100.0;
	hitInfo.hitValue = vec4(0.0);

	// Base Ray
	RayData baseData = get_ray_data();
	traceRayEXT(
		topLevelAS, 
		gl_RayFlagsOpaqueEXT, 
		0xff, 
		0, 0, 
		missIndex, 
		baseData.origin, 
		tmin, 
		baseData.direction, 
		tmax, 
		0
	);
	vec3 color = vec3(hitInfo.hitValue[0], hitInfo.hitValue[1], hitInfo.hitValue[2]) 
			* vec3(hitInfo.hitValue[3])
			* vec3(baseData.absorbMul);

	if (hitInfo.hitValue[3] >= 1.0) {
		return color;
	}

	
	// Refelection Rays
	RayData ray_datas[MAX_DEPTH];
	ray_datas[0].origin = hitInfo.hitOrigin;
	ray_datas[0].direction = reflect(baseData.direction, hitInfo.hitNormal);
	ray_datas[0].absorbMul = baseData.absorbMul * 0.8;

	int passes[MAX_DEPTH];
	for (int i = 0; i < MAX_RAYS_PER_PIXEL; i++){
		passes[i] = 0;
	}

	int level = 0;

	while(level >= 0){

		if (passes[level] >= scene.rays_per_pixel){
			passes[level - 1]++;

			level--;
			continue;
		}

		traceRayEXT(
			topLevelAS, 
			gl_RayFlagsOpaqueEXT, 
			0xff, 
			0, 0, 
			missIndex, 
			ray_datas[level].origin, 
			tmin, 
			ray_datas[level].direction + randVec3(ray_datas[level].origin.xy + vec2(passes[level]), vec3(-scene.diffusion), vec3(scene.diffusion)), 
			tmax, 
			0
		);

		color += vec3(hitInfo.hitValue[0], hitInfo.hitValue[1], hitInfo.hitValue[2])
			* hitInfo.hitValue[3]
			* ray_datas[level].absorbMul
			/ float(scene.rays_per_pixel * (level +1));
		

		if (hitInfo.hitValue[3] >= 1.0 || level >= scene.maxDepth - 1) {
			passes[level]++;
			continue;
		}

		ray_datas[level + 1].origin = hitInfo.hitOrigin;
		ray_datas[level + 1].direction = reflect(ray_datas[level].direction, hitInfo.hitNormal);
		ray_datas[level + 1].absorbMul = ray_datas[level].absorbMul * 0.8;

		level++;
	}
	
	return color;
}


vec3 render_main(){

	uint missIndex = 0;
	float tmin = 0.001;
	float tmax = 100.0;
	hitInfo.hitValue = vec4(0.0);

	// Base Ray
	RayData ray_data = get_ray_data();
	vec3 color = vec3(0.0);
	int level = 0;
	while(level < scene.maxDepth){

		traceRayEXT(
			topLevelAS, 
			gl_RayFlagsOpaqueEXT, 
			0xff, 
			0, 0, 
			missIndex, 
			ray_data.origin, 
			tmin, 
			ray_data.direction, 
			tmax, 
			0
		);

		color += vec3(hitInfo.hitValue[0], hitInfo.hitValue[1], hitInfo.hitValue[2])
			* hitInfo.hitValue[3]
			* ray_data.absorbMul;

		if (hitInfo.hitValue[3] >= 1.0) {
			break;
		}

		ray_data.origin = hitInfo.hitOrigin;
		ray_data.direction = reflect(ray_data.direction, hitInfo.hitNormal);
		ray_data.absorbMul *= 0.8;

		level++;
	}
	
	return color;
}

void main() {
	vec3 color = vec3(0.0);
	if (scene.render_mode == 0){
		color = render_debug_reflections();
	}
	else if (scene.render_mode == 1){
		color = render_debug_color();
	}
	else if (scene.render_mode == 2){
		color = render_main();
	}
	else if (scene.render_mode == 3){
		color = render_diffusion();
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}
