#version 450
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D img;

layout(binding = 1) uniform UniformBufferObject {
    vec4 screen_size; // z is mode as u32, w debug scale
    vec4 pos;
    vec3 dir;
} ubo;

uint getMode(){
    return uint(floatBitsToUint(ubo.screen_size.z));
}

uint getDebugScale(){
    return uint(floatBitsToUint(ubo.screen_size.w));
}

// Material Buffer
layout(std430, binding = 2) buffer MaterialBuffer {
    vec4 materials[];
} materialBuffer;

// Octtree Start
#define PTR_MASK 16777215
#define BRANCH_MASK 4278190080
#define MAX_PTR 1000000

layout(std430, binding = 3) buffer OcttreeBuffer {
    uint octtree[];
} octtreeBuffer;

// Node
#define GET_HEADER(index) octtreeBuffer.octtree[index * 3]
#define GET_PTR_FROM_HEADER(header) (header & PTR_MASK)
#define GET_BRANCH_FROM_HEADER(header) ((header & BRANCH_MASK) >> 24)
// Octtree End

vec3 getColorGradient(float x){
    if (x == 0){
        return vec3(0);
    }

    vec3 firstColor = vec3(0, 1, 0); // green
    vec3 middleColor = vec3(0, 0, 1); // blue
    vec3 endColor = vec3(1, 0, 0); // red

    float h = 0.5; // adjust position of middleColor
    vec3 col = mix(mix(firstColor, middleColor, x/h), mix(middleColor, endColor, (x - h)/(1.0 - h)), step(h, x));
    return col;
}

vec3 draw_buffer_debuger(){
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = gl_GlobalInvocationID.xy / ubo.screen_size.xy;

    uint nodeIndex = gl_GlobalInvocationID.x / getDebugScale();
    uint header = GET_HEADER(nodeIndex);
    
    vec3 color = vec3(0);
    // Static Data
    if (uv.y < 0.05) {
        color = getColorGradient(float(GET_PTR_FROM_HEADER(header)) / float(MAX_PTR));
    }

    return color;
}

void main () { 
    vec3 color = draw_buffer_debuger();
    
    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(color, 0));
}

