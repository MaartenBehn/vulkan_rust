#version 450
#extension GL_EXT_debug_printf : enable


layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, rgba8) uniform writeonly image2D img;

layout(binding = 1) uniform UniformBufferObject {
    vec4 screen_size; // z is mode as u32, w debug scale
    vec4 pos;
    vec3 dir;
} ubo;

uint getMode(){
    return uint(floatBitsToUint(ubo.screen_size.z));
}

uint getDebugScale(){
    return uint(floatBitsToUint(ubo.screen_size.w));
}

#define STEP_TO_ROOT bool(floatBitsToUint(ubo.pos.w))

// Octtree Start
#define Bit_8_MAX 255
#define Bit_16_MAX 65535

struct Node{
    uint children[8];
    uvec4 dynamik_data; // 0: Parent 1: PNext 2: PLast     3:
    uvec4 static_data;  // 0: Id     1:       2: Material  3: Depth
};

layout(std430, binding = 2) buffer OcttreeBuffer {
    Node octtree[];
} octtreeBuffer;

layout(binding = 3) uniform OcttreeInfo {
    uvec4 data_0;
    uvec4 data_1;
} octtreeInfo;

// Node
#define GET_NODE(index) octtreeBuffer.octtree[index]
#define SET_NODE(node, index) octtreeBuffer.octtree[index] = node


// Child Index
#define GET_CHILD_INDEX(node, childNr) node.children[childNr]
#define SET_CHILD_INDEX(node, childNr, childIndex) node.children[childNr] = childIndex

#define GET_CHILD_INDEX_BY_INDEX(index, childNr) octtreeBuffer.octtree[index].children[childNr]
#define SET_CHILD_INDEX_BY_INDEX(index, childNr, childIndex) octtreeBuffer.octtree[index].children[childNr] = childIndex

// Parent Index
#define GET_PARENT_INDEX(node) node.dynamik_data[0]
#define SET_PARENT_INDEX(node, parentIndex) node.dynamik_data[0] = parentIndex

#define GET_PARENT_INDEX_BY_INDEX(index) octtreeBuffer.octtree[index].dynamik_data[0]
#define SET_PARENT_INDEX_BY_INDEX(index, parentIndex) octtreeBuffer.octtree[index].dynamik_data[0] = parentIndex

// P Next
#define GET_P_NEXT(node) node.dynamik_data[1]
#define SET_P_NEXT(node, pNext) node.dynamik_data[1] = pNext

#define GET_P_NEXT_BY_INDEX(index) octtreeBuffer.octtree[index].dynamik_data[1]
#define SET_P_NEXT_BY_INDEX(index, pNext) octtreeBuffer.octtree[index].dynamik_data[1] = pNext

// P Last
#define GET_P_LAST(node) node.dynamik_data[2]
#define SET_P_LAST(node, pLast) node.dynamik_data[2] = pLast

#define GET_P_LAST_BY_INDEX(index) octtreeBuffer.octtree[index].dynamik_data[2]
#define SET_P_LAST_BY_INDEX(index, pLast) octtreeBuffer.octtree[index].dynamik_data[2] = pLast

// Flags
#define RESET_FLAGS(index) octtreeBuffer.octtree[index].dynamik_data[3] = 0

// Render Flag
#define GET_RENDER_FLAG(node) bool(node.dynamik_data[3] & 1)
#define SET_RENDER_FLAG(node) node.dynamik_data[3] |= 1
#define RESET_RENDER_FLAG(node) node.dynamik_data[3] &= ~1

#define GET_RENDER_FLAG_BY_INDEX(index) bool(octtreeBuffer.octtree[index].dynamik_data[3] & 1)
#define SET_RENDER_FLAG_BY_INDEX(index) octtreeBuffer.octtree[index].dynamik_data[3] |= 1
#define RESET_RENDER_FLAG_BY_INDEX(index) octtreeBuffer.octtree[index].dynamik_data[3] &= ~1

// Needs Child
#define GET_NEEDS_CHILD(node, childNr) bool(node.dynamik_data[3] & (1 << (16 + childNr)))
#define SET_NEEDS_CHILD(node, childNr) node.dynamik_data[3] |= (1 << (16 + childNr))
#define RESET_NEEDS_CHILDREN(node) node.dynamik_data[3] &= ~(Bit_8_MAX << 16)

#define GET_NEEDS_CHILD_BY_INDEX(index, childNr) bool(octtreeBuffer.octtree[index].dynamik_data[3] & (1 << (16 + childNr)))
#define SET_NEEDS_CHILD_BY_INDEX(index, childNr) octtreeBuffer.octtree[index].dynamik_data[3] |= (1 << (16 + childNr))
#define RESET_NEEDS_CHILDREN_BY_INDEX(index) octtreeBuffer.octtree[index].dynamik_data[3] &= ~(Bit_8_MAX << 16)

// ID
#define GET_NODE_ID(node) uvec2(node.static_data[0], node.static_data[1])
#define GET_NODE_ID_BY_INDEX(index) uvec2(octtreeBuffer.octtree[index].static_data[0], octtreeBuffer.octtree[index].static_data[1])

// Material
#define GET_MATERIAL_ID(node) node.static_data[2]
#define GET_MATERIAL_ID_BY_INDEX(index) octtreeBuffer.octtree[index].static_data[2]

// Depth
#define GET_NODE_DEPTH(node) node.static_data[3] & Bit_16_MAX
#define GET_NODE_DEPTH_BY_INDEX(index) octtreeBuffer.octtree[index].static_data[3] & Bit_16_MAX

// Leaf
#define GET_NODE_LEAF(node) bool((node.static_data[3] >> 16) & 1)
#define GET_NODE_LEAF_BY_INDEX(node) bool((octtreeBuffer.octtree[index].static_data[3] >> 16) & 1)

// Empty
#define GET_NODE_EMPTY(node) bool((node.static_data[3] >> 17) & 1)
#define GET_NODE_EMPTY_BY_INDEX(node) bool((octtreeBuffer.octtree[index].static_data[3] >> 17) & 1)


// Octtree Info
#define TREE_SIZE uvec2(octtreeInfo.data_0[0], octtreeInfo.data_0[1])
#define BUFFER_SIZE octtreeInfo.data_0[2]
#define TRANSFER_SIZE octtreeInfo.data_0[3]

#define OCTTREE_DEPTH octtreeInfo.data_1[0]
#define LODER_SIZE octtreeInfo.data_1[1]
// Octtree End

layout(std430, binding = 4) buffer MaterialBuffer {
    vec4 materials[];
} materialBuffer;


#define VIEW_MULTI 0.01
#define MAX_STEPS 200
#define RAY_POS_OFFSET 0.001

vec3 getColorGradient(float x){
    if (x == 0){
        return vec3(0);
    }

    vec3 firstColor = vec3(0, 1, 0); // greee
    vec3 middleColor = vec3(0, 0, 1); // blue
    vec3 endColor = vec3(1, 0, 0); // red

    float h = 0.5; // adjust position of middleColor
    vec3 col = mix(mix(firstColor, middleColor, x/h), mix(middleColor, endColor, (x - h)/(1.0 - h)), step(h, x));
    return col;
}

vec3 draw_buffer_debuger(){
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = gl_GlobalInvocationID.xy / ubo.screen_size.xy;


    uint nodeIndex = gl_GlobalInvocationID.x / getDebugScale();
    Node node = GET_NODE(nodeIndex);

    if (getMode() == 4) {
        uint head = 0;
        for (int i = 0; i < nodeIndex; i++){
            head = GET_P_NEXT_BY_INDEX(head);
        }
        node = GET_NODE(head);
    }
    
    vec3 color = vec3(0);
    // Static Data
    if (uv.y < 0.05) {
        color = getColorGradient(float(GET_NODE_ID(node)[0]) / float(TREE_SIZE[0]));
    }
    else if (uv.y < 0.1) {
        color = getColorGradient(float(GET_NODE_ID(node)[1]) / float(TREE_SIZE[1]));
    }
    else if (uv.y < 0.15) {
        color = vec3(GET_MATERIAL_ID(node));
    }
    else if (uv.y < 0.2) {
        color = getColorGradient(float(GET_NODE_DEPTH(node)) / float(OCTTREE_DEPTH));
    }

    // Dynamik Data
    else if (uv.y < 0.25) {
        color = getColorGradient(float(GET_CHILD_INDEX(node, 0)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.3) {
        color = getColorGradient(float(GET_CHILD_INDEX(node, 1)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.35) {
        color = getColorGradient(float(GET_CHILD_INDEX(node, 2)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.4) {
        color = getColorGradient(float(GET_CHILD_INDEX(node, 3)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.45) {
        color = getColorGradient(float(GET_CHILD_INDEX(node, 4)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.5) {
        color = getColorGradient(float(GET_CHILD_INDEX(node, 5)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.55) {
        color = getColorGradient(float(GET_CHILD_INDEX(node, 6)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.6) {
        color = getColorGradient(float(GET_CHILD_INDEX(node, 7)) / float(BUFFER_SIZE));
    }

    else if (uv.y < 0.65) {
        color = getColorGradient(float(GET_PARENT_INDEX(node)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.7) {
        color = getColorGradient(float(GET_P_NEXT(node)) / float(BUFFER_SIZE));
    }
    else if (uv.y < 0.75) {
        color = getColorGradient(float(GET_P_LAST(node)) / float(BUFFER_SIZE));
    }

    // Flags
    else if (uv.y < 0.9) {
        color = vec3(GET_RENDER_FLAG(node));
    }
    else if (uv.y < 0.91) {
        color = vec3(GET_NEEDS_CHILD(node, 0));
    }
    else if (uv.y < 0.92) {
        color = vec3(GET_NEEDS_CHILD(node, 1));
    }
    else if (uv.y < 0.93) {
        color = vec3(GET_NEEDS_CHILD(node, 2));
    }
    else if (uv.y < 0.94) {
        color = vec3(GET_NEEDS_CHILD(node, 3));
    }
    else if (uv.y < 0.95) {
        color = vec3(GET_NEEDS_CHILD(node, 4));
    }
    else if (uv.y < 0.96) {
        color = vec3(GET_NEEDS_CHILD(node, 5));
    }
    else if (uv.y < 0.97) {
        color = vec3(GET_NEEDS_CHILD(node, 6));
    }
    else if (uv.y < 0.98) {
        color = vec3(GET_NEEDS_CHILD(node, 7));
    }

    return color;
}

struct Ray{
    vec3 pos;
    vec3 dir;
    vec3 odir; // = 1 / dir
};

Ray initRay(){
    vec2 uv = ((gl_GlobalInvocationID.xy * 2 - ubo.screen_size.xy) / ubo.screen_size.y) * vec2(-1);

    vec3 ro = ubo.pos.xyz;
    vec3 fwd = ubo.dir.xyz;
    vec3 up = vec3(0.,1.,0.);
    vec3 right = normalize(cross(up,fwd));
    up = cross(fwd,right);
    vec3 rd = right * uv.x + up * uv.y + fwd;
    rd = normalize(rd);

    Ray ray = Ray(ro, rd, vec3(1) / rd);
    return ray;
}

bool checkHit(in Ray ray, in vec3 nodePos, in uint size, out float tMin, out float tMax)
{
    vec3 minSize = nodePos;
    vec3 maxSize = nodePos + vec3(size);

    vec3 isPositive = vec3(ray.odir.x > 0, ray.odir.y > 0, ray.odir.z >= 0); // ray.odir = 1.0 / ray.dir
    vec3 isNegative = 1.0f - isPositive;

    vec3 leftSide  = isPositive * minSize + isNegative * maxSize;
    vec3 rightSide = isPositive * maxSize + isNegative * minSize;

    vec3 leftSideTimesOneOverDir  = (leftSide  - ray.pos) * ray.odir;
    vec3 rightSideTimesOneOverDir = (rightSide - ray.pos) * ray.odir;

    tMin = max(leftSideTimesOneOverDir.x, max(leftSideTimesOneOverDir.y, leftSideTimesOneOverDir.z));
    tMax = min(rightSideTimesOneOverDir.x, min(rightSideTimesOneOverDir.y, rightSideTimesOneOverDir.z));

    // vec3 directionSign = sign(odir);
    // sideMin = vec3(leftSideTimesOneOverDir.x == tMin, leftSideTimesOneOverDir.y == tMin, leftSideTimesOneOverDir.z == tMin) * directionSign;
    // sideMax = vec3(rightSideTimesOneOverDir.x == tMax, rightSideTimesOneOverDir.y == tMax, rightSideTimesOneOverDir.z == tMax) * directionSign;

    return tMax > tMin;
}


/*
Child Offset:
0  [0, 0, 0],
1  [0, 0, 1],
2  [0, 1, 0],
3  [0, 1, 1],

4  [1, 0, 0],
5  [1, 0, 1],
6  [1, 1, 0],
7  [1, 1, 1],

Side:
0  [0, 0, 1]
1  [0, 1, 0]
2  [1, 0, 0]

3  [0, 0,-1]
4  [0,-1, 0]
5  [-1, 0, 0]
*/

uvec3 getNodePos(vec3 pos, uint size){
    uvec3 nodePos = (uvec3(pos / size) - uvec3(pos.x < 0, pos.y < 0, pos.z < 0)) * size;
    return nodePos;
}

uint getChildFromPos(uvec3 pos){
    return pos.x * 4 + pos.y * 2 + pos.z;
}

uint getSizeFromDepth(uint depth, uint octtree_depth){
    uint nodeSizes[20] = uint[](
        1,
        2,
        4,
        8,
        16,
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096,
        8192,
        16384,
        32768,
        65536,
        131072,
        262144,
        524288
    );
    return nodeSizes[octtree_depth - depth];
}

bool hitOctree(in Ray ray, out vec3 color, out uint counter){

    uint octtree_depth = OCTTREE_DEPTH;
    float tMin;
    float tMax;
    float rayLen = 0;
    uint rootSize = getSizeFromDepth(0, octtree_depth);
    
    // Inital Check
    if (getNodePos(ray.pos, rootSize) != uvec3(0)){
        bool initalHit = checkHit(ray, vec3(0, 0, 0), rootSize, tMin, tMax);
        vec3 nextPos = ray.pos + ray.dir * (tMin + RAY_POS_OFFSET);

        if (!initalHit || (tMin < 0) || (tMax < 0) 
            || (nextPos.x < 0) || (nextPos.y < 0) || (nextPos.z < 0) 
            || (nextPos.x >= rootSize) || (nextPos.y >= rootSize) || (nextPos.z >= rootSize)){
            return false;
        }
        else{
            ray.pos = nextPos;
            rayLen += tMin;
        }
    }

    // Loop
    uint depth = 0;
    uint size = rootSize;
    uint bufferSize = BUFFER_SIZE;
    bool stepToRoot = STEP_TO_ROOT;

    SET_RENDER_FLAG_BY_INDEX(0);
    Node root = GET_NODE(0);
    Node node = root;
    uint nodeIndex = 0;
    uvec3 nodePos = uvec3(0);

    color = vec3(0);
    counter = 0;
    
    while(counter < MAX_STEPS){
        bool isEmpty = GET_NODE_EMPTY(node);
        bool isLeave = GET_NODE_LEAF(node) || depth >= (octtree_depth - (rayLen * VIEW_MULTI));

        if (!isEmpty && !isLeave){
            
            depth += 1;                                                        
            size = getSizeFromDepth(depth, octtree_depth);                      

            uvec3 newNodePos = getNodePos(ray.pos, size);
            uvec3 posDelta = (newNodePos - nodePos) / size; 
            nodePos = newNodePos;                                               

            uint childNr = getChildFromPos(posDelta);
            uint newNodeIndex = GET_CHILD_INDEX(node, childNr);

            // DEBUG
            if (childNr > 7){
                debugPrintfEXT("Invalid ChildNr: %d", childNr);
                debugPrintfEXT("Depth: %d Size: %d", depth, size);
                debugPrintfEXT("Ray pos: %f %f %f Ray Dir %f %f %f", ray.pos.x, ray.pos.y, ray.pos.z, ray.dir.x, ray.dir.y, ray.dir.z);
                debugPrintfEXT("Note pos: %d %d %d", newNodePos.x, newNodePos.y, newNodePos.z);
                debugPrintfEXT("Pos Delta: %d %d %d", posDelta.x, posDelta.y, posDelta.z);
                return false;
            }

            if (newNodeIndex == 0){
                SET_NEEDS_CHILD_BY_INDEX(nodeIndex, childNr);                   
                isLeave = true; // Child is not in Buffer                       
            }
            else{
                nodeIndex = newNodeIndex;                                       
                SET_RENDER_FLAG_BY_INDEX(nodeIndex);                         
                node = GET_NODE(nodeIndex);                                  
            }
        }
        else if (isEmpty){
            checkHit(ray, vec3(nodePos), size, tMin, tMax);                     
            ray.pos = ray.pos + ray.dir * (tMax + RAY_POS_OFFSET);              
            rayLen += tMax; 

            if (stepToRoot){
                if (getNodePos(ray.pos, rootSize) == ivec3(0)){

                    nodeIndex = 0;                                                  
                    node = root;                                                    
                    depth = 0;                                                      
                    size = rootSize;   
                    nodePos = uvec3(0);                                             
                }
                else{
                    return false; // Ray left Tree.                                 
                }
            }
            else{
                while (true) {
                
                    depth -= 1;

                    size = getSizeFromDepth(depth, octtree_depth);    
                    nodePos = getNodePos(ray.pos, size);
                    nodeIndex = GET_PARENT_INDEX(node);
                    node = GET_NODE(nodeIndex);

                    if (nodePos == ivec3(0)){
                        break;                                          
                    }
                    else if (depth == 0){
                        return false; // Ray left Tree.                                 
                    }
                }                     
            }           
        }

        if (!isEmpty && isLeave){
            uint materialId = GET_MATERIAL_ID(node);                            
            color = materialBuffer.materials[materialId].xyz;                   
            return true; // Ray Hit Node to Render                              
        }

        counter++;
    }

    return false; // Stopped loop
}

void main () { 
    Ray ray = initRay();

    vec3 color;
    uint counter;
    bool hit = hitOctree(ray, color, counter);

    if (getMode() == 2) {
        color = getColorGradient((float(counter) / MAX_STEPS));
    }

    color *= float(hit);

    if (getMode() == 3 || getMode() == 4) {
        color += draw_buffer_debuger() * 0.5;
    }

    imageStore(img, ivec2(gl_GlobalInvocationID.xy), vec4(color, 0));
}

