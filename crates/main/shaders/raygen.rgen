#version 460
#extension GL_EXT_ray_tracing : enable

// ------ Bindings ------ 
layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba8) uniform image2D image;
layout(binding = 2, set = 0) uniform SceneData {
	mat4 invertedView;
	mat4 invertedProj;
	vec4 lightDirection;
	vec4 lightColor;
	uint maxDepth;
	uint rays_per_pixel;
	uint render_mode;
} scene;

struct RayData{
	vec3 origin;
	vec3 direction;
	uint missIndex;
	float tmin;
	float tmax;
};

// ------ Payload ------ 
layout(location = 0) rayPayloadEXT Payload {
	vec3 directLight;
	vec3 nextRayOrigin;
	vec3 nextRayDirection;
	vec3 nextFactor;
	bool shadowRayMiss;
	int level;
} payload;

// from http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
// Hacker's Delight, Henry S. Warren, 2001
float radicalInverse(uint bits) {
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 hammersley(uint n, uint N) {
  return vec2((float(n) + 0.5) / float(N), radicalInverse(n + 1u));
}

/*
vec3 render_debug_reflections(RayData ray_data){
	traceRayEXT(
		topLevelAS, 
		gl_RayFlagsOpaqueEXT, 
		0xff, 
		0, 0, 
		ray_data.missIndex, 
		ray_data.origin, 
		ray_data.tmin, 
		ray_data.direction, 
		ray_data.tmax, 
		0
	);

	const vec3 color = vec3(1.0, 0.0, 0.0) * vec3(hitInfo.hitValue[3] >= 1.0 && !hitInfo.missed) + 
		vec3(0.0, 1.0, 0.0) * vec3(!(hitInfo.hitValue[3] >= 1.0) && !hitInfo.missed);

	return color;
}


vec3 render_debug_color(RayData ray_data){
	traceRayEXT(
		topLevelAS, 
		gl_RayFlagsOpaqueEXT, 
		0xff, 
		0, 0, 
		ray_data.missIndex, 
		ray_data.origin, 
		ray_data.tmin, 
		ray_data.direction, 
		ray_data.tmax, 
		0
	);

	return vec3(hitInfo.hitValue[0], hitInfo.hitValue[1], hitInfo.hitValue[2]);
}
*/

vec3 render_main(){

	// compute random pixel offset
	const vec2 pixelOffset = hammersley(uint(gl_LaunchIDEXT), uint(gl_LaunchSizeEXT));

	// compute the texture coordinate for the output image in range [0.0, 1.0]
  	const vec2 texCoord = (vec2(gl_LaunchIDEXT.xy) + pixelOffset) / vec2(gl_LaunchSizeEXT.xy);

	const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);

	const vec2 d = (inUV * 2.0 - 1.0);

	vec3 origin = vec3(scene.invertedView * vec4(0, 0, 0, 1));
	vec3 target = normalize(vec3(scene.invertedProj * vec4(d.x, d.y, 1, 1)));
	vec3 direction = vec3(scene.invertedView * vec4(target, 0));


	uint rayFlags = gl_RayFlagsNoneEXT; // no ray flags
	float rayMin = 0.001; // minimum ray distance for a hit
	float rayMax = 10000.0; // maximum ray distance for a hit  
	uint cullMask = 0xFFu; // no culling

	// init ray and payload
	payload.nextRayOrigin = origin;
	payload.nextRayDirection = direction;
	payload.nextFactor = vec3(1.0);
	vec3 contribution = vec3(1.0);
	vec3 color = vec3(0.0, 0.0, 0.0);
	int level = 0;
	
	// shot rays
	while(length(payload.nextRayDirection) > 0.1 && level < scene.maxDepth && length(contribution) > 0.001) {
		payload.level = level;
		// Submitting the camera ray to the acceleration structure traversal.
		// The last parameter is the index of the "payload" variable (always 0)
		traceRayEXT(topLevelAS, rayFlags, cullMask, 0u, 0u, 0u, 
			payload.nextRayOrigin, rayMin, payload.nextRayDirection, rayMax, 0);

		color = payload.directLight;
		//contribution *= payload.nextFactor;
		level++;
	}
	return color;
}

void main() {
	vec3 color = vec3(0.0);
	if (scene.render_mode == 0){
		
	}
	else if (scene.render_mode == 1){
		//color = render_debug_color(ray_data);
	}
	else if (scene.render_mode == 2){
		for (int i = 0; i < scene.rays_per_pixel; i++){
			color += render_main();
		}
		color /= scene.rays_per_pixel;
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}
